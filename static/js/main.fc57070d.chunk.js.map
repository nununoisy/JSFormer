{"version":3,"sources":["components/upload.svg","components/ImageUpload.js","components/Worker.js","components/PaletteGrid.js","components/ImageReformer.js","components/CodeGenerator.js","App.js","index.js"],"names":["ImageUpload","props","onChange","onDrop","React","useCallback","files","length","window","URL","createObjectURL","useDropzone","accept","maxFiles","getRootProps","getInputProps","isDragActive","className","src","uploadImage","Worker_fn","Worker","PaletteGrid","palette","effect","map","color","idx","style","backgroundColor","ImageReformer","imageURL","useState","rendering","setRendering","colorDepth","setColorDepth","dithKernEnabled","setDithKernEnabled","dithKern","setDithKern","outHeight","setOutHeight","outWidth","setOutWidth","setPalette","outputImageUrl","setOutputImageURL","canvasRef","useRef","useEffect","worker","ReformImage","Comlink","image","Image","onload","a","current","canvas","height","width","ctx","getContext","drawImage","getImageData","parseInt","outputImageDataURL","paletteList","imageData","w","h","terminate","type","value","e","target","checked","disabled","ref","href","rel","title","alt","CodeGenerator","imageMetadata","generating","setGenerating","prefix","setPrefix","code","setCode","hljs","highlight","language","highlightedCode","setHighlightedCode","codeStyle","setCodeStyle","copied","setCopied","GenerateCode","then","copyTimeout","setTimeout","clearTimeout","onClick","navigator","clipboard","writeText","catch","console","log","dangerouslySetInnerHTML","__html","registerLanguage","C","App","setImageURL","setImageMetadata","url","d","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fc57070d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/upload.fe063de6.svg\";","import React from 'react';\r\n\r\nimport { useDropzone } from 'react-dropzone';\r\n\r\nimport uploadImage from './upload.svg';\r\n\r\nexport default function ImageUpload(props) {\r\n    const { onChange } = props;\r\n\r\n    const onDrop = React.useCallback((files) => {\r\n        if (files && files.length > 0 && onChange)\r\n            onChange(window.URL.createObjectURL(files[0]));\r\n    }, [onChange]);\r\n\r\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop, accept: \"image/*\", maxFiles: 1 });\r\n\r\n    return (\r\n        <div {...getRootProps()} className=\"uploadContainer\">\r\n            <input {...getInputProps()} />\r\n            <div className=\"uploadDisplayContainer\">\r\n                <img src={uploadImage} />\r\n                { isDragActive ?\r\n                    <p>Drop the image here!</p> :\r\n                    <p>Drag an image here or click to select...</p>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/Worker.dfef9181.worker.js\");\n}\n","import React from 'react';\r\nimport ReactTooltip from \"react-tooltip\";\r\n\r\nexport default function PaletteGrid(props) {\r\n    const { palette } = props;\r\n\r\n    return (\r\n        <>\r\n            <ReactTooltip effect=\"solid\" />\r\n            <div className={`paletteGrid${palette.length === 2 ? ' paletteGrid2Color' : ''}`}>\r\n                {palette.map((color, idx) => (\r\n                    <div\r\n                        className=\"paletteGridItem\"\r\n                        style={{ backgroundColor: `#${color}`}}\r\n                        data-tip={`Color #${idx}: #${color}`}\r\n                    />\r\n                ))}\r\n            </div>\r\n        </>\r\n    )\r\n}","import React from 'react';\r\n\r\nimport * as Comlink from 'comlink';\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport Worker from 'worker-loader!./Worker';\r\nimport PaletteGrid from \"./PaletteGrid\";\r\n\r\nexport default function ImageReformer(props) {\r\n    const { imageURL, onChange } = props;\r\n\r\n    const [rendering, setRendering] = React.useState(false);\r\n    const [colorDepth, setColorDepth] = React.useState(8);\r\n    const [dithKernEnabled, setDithKernEnabled] = React.useState(false);\r\n    const [dithKern, setDithKern] = React.useState(\"FloydSteinberg\");\r\n    const [outHeight, setOutHeight] = React.useState(16);\r\n    const [outWidth, setOutWidth] = React.useState(16);\r\n\r\n    const [palette, setPalette] = React.useState([]);\r\n    const [outputImageUrl, setOutputImageURL] = React.useState(null);\r\n\r\n    const canvasRef = React.useRef(null);\r\n\r\n    React.useEffect(() => {\r\n        setRendering(true);\r\n\r\n        const worker = new Worker();\r\n        const { ReformImage } = Comlink.wrap(worker);\r\n\r\n        const image = new Image();\r\n        image.onload = async () => {\r\n            if (canvasRef && canvasRef.current) {\r\n                const canvas = canvasRef.current;\r\n                canvas.height = image.height;\r\n                canvas.width = image.width;\r\n                const ctx = canvas.getContext('2d');\r\n\r\n                ctx.drawImage(image, 0, 0);\r\n\r\n                const {\r\n                    palette,\r\n                    outputImageDataURL,\r\n                    paletteList,\r\n                    imageData\r\n                } = await ReformImage(\r\n                    ctx.getImageData(0, 0, image.width, image.height),\r\n                    parseInt(colorDepth, 10),\r\n                    dithKernEnabled ? dithKern : null,\r\n                    outHeight,\r\n                    outWidth\r\n                );\r\n\r\n                setPalette(palette);\r\n                setOutputImageURL(outputImageDataURL);\r\n\r\n                if (onChange) {\r\n                    onChange({\r\n                        palette: paletteList,\r\n                        imageData,\r\n                        w: outWidth,\r\n                        h: outHeight,\r\n                        colorDepth\r\n                    });\r\n                }\r\n\r\n                setRendering(false);\r\n            }\r\n        };\r\n        image.src = imageURL;\r\n\r\n        return () => {\r\n            worker.terminate();\r\n        }\r\n    }, [imageURL, colorDepth, dithKern, dithKernEnabled, outHeight, outWidth]);\r\n\r\n    return (\r\n        <div className=\"reformer\">\r\n            <label>\r\n                Image output size:\r\n                <input\r\n                    type=\"number\"\r\n                    value={outWidth}\r\n                    onChange={(e) => setOutWidth(parseInt(e.target.value,10))}\r\n                    className=\"dimensionInput\"\r\n                />\r\n                x\r\n                <input\r\n                    type=\"number\"\r\n                    value={outHeight}\r\n                    onChange={(e) => setOutHeight(parseInt(e.target.value,10))}\r\n                    className=\"dimensionInput\"\r\n                />\r\n            </label>\r\n            <label>\r\n                Color depth:\r\n                <select\r\n                    value={colorDepth}\r\n                    onChange={(e) => setColorDepth(e.target.value)}\r\n                    className=\"bitdepthInput\"\r\n                >\r\n                    <option value={1}>2 colors (1bpp)</option>\r\n                    <option value={4}>16 colors (4bpp)</option>\r\n                    <option value={8}>256 colors (8bpp)</option>\r\n                </select>\r\n            </label>\r\n            <label>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    checked={dithKernEnabled}\r\n                    onChange={(e) => setDithKernEnabled(e.target.checked)}\r\n                />\r\n                Use\r\n                <select\r\n                    value={dithKern}\r\n                    onChange={(e) => setDithKern(e.target.value)}\r\n                    disabled={!dithKernEnabled}\r\n                    className=\"dithKernSelect\"\r\n                >\r\n                    <option value=\"FloydSteinberg\">Floyd-Steinberg</option>\r\n                    <option value=\"FalseFloydSteinberg\">False Floyd-Steinberg</option>\r\n                    <option value=\"Stucki\">Stucki</option>\r\n                    <option value=\"Atkinson\">Atkinson</option>\r\n                    <option value=\"Jarvis\">Jarvis</option>\r\n                    <option value=\"Burkes\">Burkes</option>\r\n                    <option value=\"Sierra\">Sierra</option>\r\n                    <option value=\"TwoSierra\">2-row Sierra</option>\r\n                    <option value=\"SierraLite\">Sierra Lite</option>\r\n                </select>\r\n                dithering\r\n            </label>\r\n            <p>Input image:</p>\r\n            <div className=\"inputCanvasContainer\">\r\n                <canvas ref={canvasRef}>\r\n                    <p>\r\n                        Your browser needs to support HTML5 canvas to use this tool.\r\n                        Please upgrade or use a different browser.\r\n                    </p>\r\n                </canvas>\r\n            </div>\r\n            { rendering ? (\r\n                <p>Rendering...</p>\r\n            ) : (\r\n                <>\r\n                    <p>Palette:</p>\r\n                    <PaletteGrid palette={palette} />\r\n                    <p>{`Reduced image (${outWidth}x${outHeight}@${colorDepth}bpp (${2**colorDepth} colors)):`}</p>\r\n                    <a\r\n                        href={outputImageUrl}\r\n                        target=\"_blank\"\r\n                        rel=\"noreferrer\"\r\n                        title=\"Open in new tab\"\r\n                    >\r\n                        <img\r\n                            src={outputImageUrl}\r\n                            className=\"outputImage\"\r\n                            alt=\"Output\"\r\n                        />\r\n                    </a>\r\n                </>\r\n            )}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\nimport * as Comlink from 'comlink';\r\n// eslint-disable-next-line import/no-webpack-loader-syntax\r\nimport Worker from 'worker-loader!./Worker';\r\n\r\nimport hljs from 'highlight.js/lib/core';\r\nimport C from 'highlight.js/lib/languages/c';\r\n\r\nhljs.registerLanguage('c', C);\r\n\r\nexport default function CodeGenerator(props) {\r\n    const { imageMetadata } = props;\r\n\r\n    const [generating, setGenerating] = React.useState(false);\r\n    const [prefix, setPrefix] = React.useState('image');\r\n    const [code, setCode] = React.useState('// Upload an image');\r\n    const [highlightedCode, setHighlightedCode] = React.useState(\r\n        hljs.highlight('// Upload an image', { language: 'c' }).value\r\n    );\r\n    const [codeStyle, setCodeStyle] = React.useState(\"knr\");\r\n    const [copied, setCopied] = React.useState(false);\r\n\r\n    React.useEffect(() => {\r\n        setGenerating(true);\r\n\r\n        const worker = new Worker();\r\n        const { GenerateCode } = Comlink.wrap(worker);\r\n\r\n        GenerateCode(imageMetadata, prefix, codeStyle).then(({code, highlightedCode}) => {\r\n            setCode(code);\r\n            setHighlightedCode(highlightedCode);\r\n            setGenerating(false);\r\n        });\r\n\r\n        return () => {\r\n            worker.terminate();\r\n        }\r\n    }, [imageMetadata, prefix, codeStyle]);\r\n\r\n    React.useEffect(() => {\r\n        if (copied) {\r\n            const copyTimeout = setTimeout(() => setCopied(false), 5000);\r\n            return () => clearTimeout(copyTimeout);\r\n        }\r\n    }, [copied]);\r\n\r\n    return (\r\n        <div className=\"codeGeneratorContainer\">\r\n            <label>\r\n                Prefix:\r\n                <input\r\n                    type=\"text\"\r\n                    value={prefix}\r\n                    onChange={(e) => setPrefix(e.target.value)}\r\n                />\r\n            </label>\r\n            <label>\r\n                Indentation style:\r\n                <select\r\n                    value={codeStyle}\r\n                    onChange={(e) => setCodeStyle(e.target.value)}\r\n                >\r\n                    <option value=\"knr\">K&R (brackets on same line)</option>\r\n                    <option value=\"allman\">Allman (brackets on next line)</option>\r\n                </select>\r\n            </label>\r\n            { generating ? (\r\n                <p>Generating...</p>\r\n            ) : (\r\n                <>\r\n                    <button\r\n                        onClick={() => {\r\n                            navigator.clipboard.writeText(code)\r\n                                .then(() => setCopied(true))\r\n                                .catch((e) => console.log(\"Copy failed\", e));\r\n                        }}\r\n                    >\r\n                        {copied ? 'Copied!' : 'Copy to clipboard'}\r\n                    </button>\r\n                    <pre className=\"hljs\">\r\n                        <code\r\n                            className=\"language-c\"\r\n                            dangerouslySetInnerHTML={{ __html : highlightedCode }}\r\n                        />\r\n                    </pre>\r\n                </>\r\n            )}\r\n        </div>\r\n    )\r\n}","import React from 'react';\n\nimport ImageUpload from \"./components/ImageUpload\";\nimport ImageReformer from \"./components/ImageReformer\";\nimport CodeGenerator from \"./components/CodeGenerator\";\n\nfunction App() {\n    const [imageURL, setImageURL] = React.useState(null);\n\n    const [imageMetadata, setImageMetadata] = React.useState(null);\n\n    return (\n        <div className=\"columns\">\n            <div>\n                <ImageUpload onChange={(url) => setImageURL(url)} />\n            </div>\n            <div>\n                <ImageReformer\n                    imageURL={imageURL}\n                    onChange={(d) => setImageMetadata(d)}\n                />\n            </div>\n            <div>\n                <CodeGenerator\n                    imageMetadata={imageMetadata}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}